#!/bin/bash
#
# Script for testing the TextConferencingLab on ECE361
# The server should be running on a different terminal before running this script
# The client executable should be in the same folder as the script
#
# Usage:
# >>> ./testclient user1 password1 user2 password2 user3 password3 server_addr server_port
#
# Starts 3 clients and send a sequence of commands to each of them
# The commands sent to client i are printed under a line "==== client i in ===="
# The outputs of client i are printed under a line "==== client i out ===="
#

if [ $# -lt 8 ]; then
	echo "Missing arguments"
	echo "Usage: ./`basename $0` usr1 pwd1 usr2 pwd2 usr3 pwd3 srv_ip srv_port" >&2
	exit 0
fi

DELAY=1
if [ $# -eq 9 ]; then DELAY=$9;fi

for i in 1 2 3 ; do
	mkfifo c${i}_in
	exec {fds[$i]}<>c${i}_in
done

start_client(){
	if [ -z "${pidc[$1]}" ] || ! kill -0 ${pidc[$1]} &>/dev/null; then
		echo "Starting client $1"
		stdbuf -o0 ./client < c${1}_in | sed -u "i\==== client $1 out ====" &
		pidc[$1]=$!
	else
		echo "Failed to start client $1, client already running"
	fi
}

kill_client(){
	if [ -z "${pidc[$1]}" ] || ! kill -0 ${pidc[$1]} &>/dev/null; then
		echo "Failed to kill client $1, no such client running"
	else
		echo "Killing client $1"
		if kill "${pidc[$1]}" &> /dev/null; then
			echo  "Client $1 is dead"
			pidc[$1]=
		else
			echo "Kill failed"
		fi
	fi
}

while read -u 3 type data; do
	case "${type:0:1}" in 
		\# )
			if [ -z $skip ] || [ "${type:1}" = s ] ; then
				echo;
				echo -n "$data" 
			fi
			;;
		\>  )
			if [ -z $skip ] || [ "${type:1}" = s ] ; then
#				echo;
#				echo $data
				eval "$data"
			fi
			;;
		+  )
			len=${#data}
			echo;
			for ((i=0; i<len+6; ++i));do echo -n "+";done;
			printf '\n+  %s  +\n' "$data"
			for ((i=0; i<len+6; ++i));do echo -n "+";done;
			echo;echo;
			echo  "Press s to skip, q to quit, i for interactive mode"
			echo -n "or anything else to proceed normally: "
			read -n 1 user_input

			skip=
			delay=$DELAY

			case "$user_input" in
			q) echo; break ;;
			s) skip=1 ;;
			i) delay=10000 ;;
			esac

			echo;echo;

			;;
		[1-3] )
			if [ -z $skip ] || [ "${type:1}" = s ] ; then
				echo;
				echo "==== client ${type:0:1} in ===="
				eval echo $data
				eval echo "$data" > c${type:0:1}_in
				read -t $delay -n 1
			fi
			;;
	esac
	
done 3<<"testlist"
>	start_client 1
>	start_client 2
>	start_client 3

+	Setup: login and join session

#	login with correct password on client 1. Should succeed
1s	"/login $1 $2 $7 $8"

#	login back on same user on client 2. Should succeed
2s	"/login $3 $4 $7 $8"

#	login with correct password on client 3. Should succeed
3s	"/login $5 $6 $7 $8"

#	createsession on client 1. Should create and join a session called session1
1s	"/createsession session1"

#	createsession on client 2. Should create and join a session called session2
2s	"/createsession session2"

# createsession on client 3.
3s "/createsession session3"

# joinssesion
1s "/joinsession session3"
2s "/joinsession session1"
3s "/joinsession session2"

1s "/list"

1	"session1:hello, my name is user1."
1  "session3:hello, my name is user1!"

1 "/leavesession session1"

1s "/list"

1  "session1:I left session1."
1  "session3:I left session1."

1s "/list"

3  "session2:Is anyone there?"
3  "session3:Got it!"

2  "session1:Hello, this is user2."
2  "session2:Hello, this is user2."
2  "/leavesession session2"

2  "/list"
3  "session2: Is anyone there?"

# Logging out
1  "/logout"
2  "/logout"
3  "/logout"

#	quit all clients
1	"/quit"
2	"/quit"
3  "/quit"
testlist

# cleanup before leaving
for i in 1 2 3 ; do
	kill_client "$i"
	exec {fds[$i]}>&-
	rm c${i}_in
done


